(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{570:function(s,n,a){"use strict";a.r(n);var e=a(12),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("关于命名风格，不同的流派有不同的规范，此处介绍的是 "),a("a",{attrs:{href:"https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/naming/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Google 的规范"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"通用命名规则"}},[s._v("通用命名规则")]),s._v(" "),a("p",[s._v("函数命名，变量命名，文件命名要尽可能使用描述性的命名，多几个字符并不会导致你敲代码变慢。正相反，合理的命名可以让编辑器的自动补全功能发挥的更好。再加上对自己的提示效果，优雅而规范的命名绝对是可以提高你 coding 的效率的。")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('int price_count_reader;  // 无缩写\nint num_errors;          // "num" 是一个常见的写法\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("在 ACM 中，应该少用 "),a("code",[s._v("a, b, c, d")]),s._v(" 这样无意义的单字符变量命名，可以适当的使用一些常用的缩写，比如：")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("int len = str.length();  // 使用 len 来表示长度（length 的缩写）\nint num = 0;             // 使用 num 来表示数量（number 的缩写）\nint ans = dp[n];         // 使用 ans 来表示结果（answer 的缩写）\nint cnt = arr.size();    // 使用 cnt 来表示计数（count 的缩写）\nint pos = -1;            // 使用 pos 来表示位置（position 的缩写）\nint cur = 0;             // 使用 cur 来表示当前（current 的缩写）\nbool err = false;        // 使用 err 来表示错误与否（error 的缩写）\nint arr[MAXLINE];        // 使用 arr 来表示数组（array 的缩写）\ntypedef long long LL;    // 使用 LL 来表示 long long\nint dp[MAXLINE];         // 使用 dp 表示动态规划（dynamic planning）的过程数组\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("当然也有一些特例，比如：")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// ACM 中常用 m 与 n 表示输入的组数与数据规模\n// 有些古老的题目会使用多组的多组输入，这时可能会使用 t 作为最外层的多组标识\nint n, m;\n\n// i(item) 作为循环外层的变量是约定俗成的\nfor (int i = 0; i < n - 1; i++) {\n    // j 作为第二层的循环变量也是约定俗成的，同理，如果有更多层的话，依次命名为 k、l 等\n    for (int j = 0; j < n - i - 1; j++) {\n        if (arr[j] > arr[j + 1]) {\n            // 作为临时的交换变量，t(template) 是一个常用的变量命名\n            int t = arr[j];\n            arr[j] = arr[j + 1];\n            arr[j + 1] = t;\n        }\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"变量命名"}},[s._v("变量命名")]),s._v(" "),a("p",[s._v("有些命名的规范要求在变量上体现其类型，于是就会出现类似 "),a("code",[s._v("m_pHeaderNode")]),s._v(" 这样的变量命名。在我们的规范中是绝对不能使用这种变量命名的——（非特殊情况下）同一个变量名中不能同时出现大写字母与下划线。")]),s._v(" "),a("h3",{attrs:{id:"普通变量命名"}},[s._v("普通变量命名")]),s._v(" "),a("p",[s._v("对于普通变量，命名规范为“小写字母加下划线”。不需要在变量命名时体现它的类型。")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 正确\nint answer;\n// 正确\nint student_number;\n// 正确\nlong long lastlogin;\n\n// 错误\nstring userName;\n// 错误\nstring NickName;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"类数据成员"}},[s._v("类数据成员")]),s._v(" "),a("p",[s._v("类的成员变量的命名基本规范与普通变量相同，但是最后要加一个下划线。")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class TableInfo {\n private:\n  string table_name_;  // 正确\n  string tablename_;   // 正确\n  static Pool<TableInfo>* pool_;  // 正确\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"结构体变量"}},[s._v("结构体变量")]),s._v(" "),a("p",[s._v("虽然在 C++ 中，结构体与类实际上是同一种类型，但是两者在使用时通常代表了不同的意义。结构体一般表示数据的集合，而没有其他的操作。")]),s._v(" "),a("p",[s._v("结构体变量命名规范与普通变量相同，不需要在末尾添加下划线。")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("struct UrlTableProperties {\n  string name;\n  int num_entries;\n  static Pool<UrlTableProperties>* pool;\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"类型命名"}},[s._v("类型命名")]),s._v(" "),a("p",[s._v("对于自己定义的类型（类、结构体、typedef、枚举等），规范是首字母大写，不使用下划线。")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Node {};\nclass UserDetail {};\nstruct DataNode {};\ntypedef long long LL;\nenum UrlErrors {};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"常量命名"}},[s._v("常量命名")]),s._v(" "),a("p",[s._v("这条是可选的规范。如果一个变量使用 "),a("code",[s._v("const")]),s._v(" 或者在全局范围内始终保持不变，那么这个变量可以以小写的 "),a("code",[s._v("k")]),s._v(" 开头，后接大写开头的变量名。")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 正确\nconst int kDaysInAWeek = 7;\n// 正确\nconst int kMax = 112345;\n// 正确，这条是可选的规范，也可以使用普通变量的命名\nconst bool flag = true;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"函数命名"}},[s._v("函数命名")]),s._v(" "),a("p",[s._v("常规函数使用大小写混合：")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 正确\nvoid MyExcitingFunction();\n// 正确\nint MyExcitingMethod();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("对于首字母缩写的单词, 更倾向于将它们视作一个单词进行首字母大写：")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 正确\nvoid MyFirstAcmProgram();\n// 正确，但不是非常推荐\nvoid MyFirstACMProgram();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"宏定义"}},[s._v("宏定义")]),s._v(" "),a("p",[s._v("上面我们提到，同一个变量名中不能同时出现大写字母与下划线，但是宏定义不是变量名。")]),s._v(" "),a("p",[s._v("宏定义的规范是全大写字母加下划线。")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#define MY_MACRO_THAT_SCARES_SMALL_CHILDREN\n#define ROUND(x)\n#define PI_ROUNDED 3.0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);